// Package discovery_kit_api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package discovery_kit_api

import (
	"encoding/json"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// Defines values for AttributeMatcher.
const (
	Contains   AttributeMatcher = "contains"
	Equals     AttributeMatcher = "equals"
	StartsWith AttributeMatcher = "starts_with"
)

// Defines values for DescribingEndpointReferenceMethod.
const (
	DescribingEndpointReferenceMethodGET DescribingEndpointReferenceMethod = "GET"
)

// Defines values for DescribingEndpointReferenceWithCallIntervalMethod.
const (
	DescribingEndpointReferenceWithCallIntervalMethodGET DescribingEndpointReferenceWithCallIntervalMethod = "GET"
)

// Defines values for DiscoveryDescriptionRestrictTo.
const (
	ANY    DiscoveryDescriptionRestrictTo = "ANY"
	LEADER DiscoveryDescriptionRestrictTo = "LEADER"
)

// Defines values for OrderByDirection.
const (
	ASC  OrderByDirection = "ASC"
	DESC OrderByDirection = "DESC"
)

// Attribute defines model for Attribute.
type Attribute struct {
	Matcher AttributeMatcher `json:"matcher"`
	Name    string           `json:"name"`
}

// AttributeMatcher defines model for Attribute.Matcher.
type AttributeMatcher string

// AttributeDescription defines model for AttributeDescription.
type AttributeDescription struct {
	// Attribute The attribute name, for example `cat.name`
	Attribute string      `json:"attribute"`
	Label     PluralLabel `json:"label"`
}

// AttributeDescriptions defines model for AttributeDescriptions.
type AttributeDescriptions struct {
	Attributes []AttributeDescription `json:"attributes"`
}

// Column defines model for Column.
type Column struct {
	// Attribute The attribute which should be displayed in the column.
	Attribute string `json:"attribute"`

	// FallbackAttributes If the given attribute is empty, the fallbackAttributes are used. The first non-empty attribute will be displayed.
	FallbackAttributes *[]string `json:"fallbackAttributes,omitempty"`
}

// DescribingEndpointReference HTTP endpoint which the Steadybit platform/agent could communicate with.
type DescribingEndpointReference struct {
	// Method HTTP method to use when calling the HTTP endpoint.
	Method DescribingEndpointReferenceMethod `json:"method"`

	// Path Absolute path of the HTTP endpoint.
	Path string `json:"path"`
}

// DescribingEndpointReferenceMethod HTTP method to use when calling the HTTP endpoint.
type DescribingEndpointReferenceMethod string

// DescribingEndpointReferenceWithCallInterval defines model for DescribingEndpointReferenceWithCallInterval.
type DescribingEndpointReferenceWithCallInterval struct {
	// CallInterval At what frequency should the state endpoint be called? Takes durations in the format of `100ms` or `10s`.
	CallInterval *string `json:"callInterval,omitempty"`

	// Method HTTP method to use when calling the HTTP endpoint.
	Method DescribingEndpointReferenceWithCallIntervalMethod `json:"method"`

	// Path Absolute path of the HTTP endpoint.
	Path string `json:"path"`
}

// DescribingEndpointReferenceWithCallIntervalMethod HTTP method to use when calling the HTTP endpoint.
type DescribingEndpointReferenceWithCallIntervalMethod string

// DiscoveredTargets Deprecated: use `DiscoveryData` instead. The results of a discovery call.
type DiscoveredTargets struct {
	Targets []Target `json:"targets"`
}

// DiscoveryData The results of a discovery call
type DiscoveryData struct {
	EnrichmentData *[]EnrichmentData `json:"enrichmentData,omitempty"`
	Targets        *[]Target         `json:"targets,omitempty"`
}

// DiscoveryDescription Provides details about a discovery, e.g., what endpoint needs to be called to discover targets.
type DiscoveryDescription struct {
	// Discover HTTP endpoint which the Steadybit platform/agent could communicate with.
	Discover DescribingEndpointReferenceWithCallInterval `json:"discover"`

	// Id A technical ID that is used to uniquely identify this type of discovery. You will typically want to use something like `org.example.discoveries.my-fancy-discovery`.
	Id string `json:"id"`

	// RestrictTo If the agent is deployed as a daemonset in Kubernetes, should the discovery only be called from the leader agent? This can be helpful to avoid duplicate targets for every running agent.
	RestrictTo *DiscoveryDescriptionRestrictTo `json:"restrictTo,omitempty"`
}

// DiscoveryDescriptionRestrictTo If the agent is deployed as a daemonset in Kubernetes, should the discovery only be called from the leader agent? This can be helpful to avoid duplicate targets for every running agent.
type DiscoveryDescriptionRestrictTo string

// DiscoveryKitError RFC 7807 Problem Details for HTTP APIs compliant response body for error scenarios
type DiscoveryKitError struct {
	// Detail A human-readable explanation specific to this occurrence of the problem.
	Detail *string `json:"detail,omitempty"`

	// Instance A URI reference that identifies the specific occurrence of the problem.
	Instance *string `json:"instance,omitempty"`

	// Title A short, human-readable summary of the problem type.
	Title string `json:"title"`

	// Type A URI reference that identifies the problem type.
	Type *string `json:"type,omitempty"`
}

// DiscoveryList Lists all discoveries that the platform/agent could execute.
type DiscoveryList struct {
	Discoveries           []DescribingEndpointReference `json:"discoveries"`
	TargetAttributes      []DescribingEndpointReference `json:"targetAttributes"`
	TargetEnrichmentRules []DescribingEndpointReference `json:"targetEnrichmentRules"`
	TargetTypes           []DescribingEndpointReference `json:"targetTypes"`
}

// EnrichmentData A single discovered enrichment data
type EnrichmentData struct {
	// Attributes These attributes contains the actual data provided through the discovery.  These attributes are used to find matching targets and can be copied to a target.
	Attributes map[string][]string `json:"attributes"`

	// EnrichmentDataType The type of the enrichment data. Will be used to find matching targets to enrich data.
	EnrichmentDataType string `json:"enrichmentDataType"`

	// Id The id of the enrichment data, needs to be unique per agent and enrichment data type.
	Id string `json:"id"`
}

// OrderBy defines model for OrderBy.
type OrderBy struct {
	Attribute string           `json:"attribute"`
	Direction OrderByDirection `json:"direction"`
}

// OrderByDirection defines model for OrderBy.Direction.
type OrderByDirection string

// PluralLabel defines model for PluralLabel.
type PluralLabel struct {
	One   string `json:"one"`
	Other string `json:"other"`
}

// SourceOrDestination defines model for SourceOrDestination.
type SourceOrDestination struct {
	// Selector To identify a source or a destination, we employ a mechanism similar to Kubernetes label selectors. When this instance represents a source, you can use the placeholder `${src.attribute}` to refer to target attributes of the destination. Note that you can use the placeholders `${src.attribute}` and `${dest.attribute}` respectively.
	Selector map[string]string `json:"selector"`

	// Type The source or destination target type.
	Type string `json:"type"`
}

// Table defines model for Table.
type Table struct {
	Columns []Column  `json:"columns"`
	OrderBy []OrderBy `json:"orderBy"`
}

// Target A single discovered target
type Target struct {
	// Attributes These attributes include detailed information about the target provided through the discovery. These attributes are typically used as additional parameters within the attack implementation.
	Attributes map[string][]string `json:"attributes"`

	// Id The id of the target, needs to be unique per agent and target type.
	Id string `json:"id"`

	// Label A label, which will be used by the platform to display the target
	Label string `json:"label"`

	// TargetType The type of the target. Will be used to find matching attacks and find the right ui configuration to show and select the targets.
	TargetType string `json:"targetType"`
}

// TargetDescription A definition of a target type and how it will be handled by the ui
type TargetDescription struct {
	// Category A human readable label categorizing the target type, e.g., 'cloud' or 'Kubernetes'.
	Category *string `json:"category,omitempty"`

	// Icon An icon that is used to identify the targets in the ui. Needs to be a data-uri containing an image.
	Icon *string `json:"icon,omitempty"`

	// Id a global unique name of the target type
	Id    string      `json:"id"`
	Label PluralLabel `json:"label"`
	Table Table       `json:"table"`

	// Version The version of the target type. Remember to increase the value everytime you update the definitions. The platform will ignore any definition changes with the same version. We do recommend usage of semver strings.
	Version string `json:"version"`
}

// TargetEnrichmentRule A rule describing how to enrich a target with data from another target or from enrichment data
type TargetEnrichmentRule struct {
	Attributes []Attribute         `json:"attributes"`
	Dest       SourceOrDestination `json:"dest"`

	// Id a global unique name of the enrichment rule
	Id  string              `json:"id"`
	Src SourceOrDestination `json:"src"`

	// Version The version of the enrichment rule. Remember to increase the value everytime you update the definitions. The platform will ignore any definition changes with the same version. We do recommend usage of semver strings.
	Version string `json:"version"`
}

// DescribeAttributesResponse defines model for DescribeAttributesResponse.
type DescribeAttributesResponse struct {
	union json.RawMessage
}

// DescribeTargetEnrichmentRulesResponse defines model for DescribeTargetEnrichmentRulesResponse.
type DescribeTargetEnrichmentRulesResponse struct {
	union json.RawMessage
}

// DescribeTargetResponse defines model for DescribeTargetResponse.
type DescribeTargetResponse struct {
	union json.RawMessage
}

// DiscoveryDescriptionResponse defines model for DiscoveryDescriptionResponse.
type DiscoveryDescriptionResponse struct {
	union json.RawMessage
}

// DiscoveryListResponse defines model for DiscoveryListResponse.
type DiscoveryListResponse struct {
	union json.RawMessage
}

// DiscoveryResponse defines model for DiscoveryResponse.
type DiscoveryResponse struct {
	union json.RawMessage
}

// AsAttributeDescriptions returns the union data inside the DescribeAttributesResponse as a AttributeDescriptions
func (t DescribeAttributesResponse) AsAttributeDescriptions() (AttributeDescriptions, error) {
	var body AttributeDescriptions
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAttributeDescriptions overwrites any union data inside the DescribeAttributesResponse as the provided AttributeDescriptions
func (t *DescribeAttributesResponse) FromAttributeDescriptions(v AttributeDescriptions) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAttributeDescriptions performs a merge with any union data inside the DescribeAttributesResponse, using the provided AttributeDescriptions
func (t *DescribeAttributesResponse) MergeAttributeDescriptions(v AttributeDescriptions) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsDiscoveryKitError returns the union data inside the DescribeAttributesResponse as a DiscoveryKitError
func (t DescribeAttributesResponse) AsDiscoveryKitError() (DiscoveryKitError, error) {
	var body DiscoveryKitError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDiscoveryKitError overwrites any union data inside the DescribeAttributesResponse as the provided DiscoveryKitError
func (t *DescribeAttributesResponse) FromDiscoveryKitError(v DiscoveryKitError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDiscoveryKitError performs a merge with any union data inside the DescribeAttributesResponse, using the provided DiscoveryKitError
func (t *DescribeAttributesResponse) MergeDiscoveryKitError(v DiscoveryKitError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t DescribeAttributesResponse) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DescribeAttributesResponse) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTargetEnrichmentRule returns the union data inside the DescribeTargetEnrichmentRulesResponse as a TargetEnrichmentRule
func (t DescribeTargetEnrichmentRulesResponse) AsTargetEnrichmentRule() (TargetEnrichmentRule, error) {
	var body TargetEnrichmentRule
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTargetEnrichmentRule overwrites any union data inside the DescribeTargetEnrichmentRulesResponse as the provided TargetEnrichmentRule
func (t *DescribeTargetEnrichmentRulesResponse) FromTargetEnrichmentRule(v TargetEnrichmentRule) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTargetEnrichmentRule performs a merge with any union data inside the DescribeTargetEnrichmentRulesResponse, using the provided TargetEnrichmentRule
func (t *DescribeTargetEnrichmentRulesResponse) MergeTargetEnrichmentRule(v TargetEnrichmentRule) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsDiscoveryKitError returns the union data inside the DescribeTargetEnrichmentRulesResponse as a DiscoveryKitError
func (t DescribeTargetEnrichmentRulesResponse) AsDiscoveryKitError() (DiscoveryKitError, error) {
	var body DiscoveryKitError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDiscoveryKitError overwrites any union data inside the DescribeTargetEnrichmentRulesResponse as the provided DiscoveryKitError
func (t *DescribeTargetEnrichmentRulesResponse) FromDiscoveryKitError(v DiscoveryKitError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDiscoveryKitError performs a merge with any union data inside the DescribeTargetEnrichmentRulesResponse, using the provided DiscoveryKitError
func (t *DescribeTargetEnrichmentRulesResponse) MergeDiscoveryKitError(v DiscoveryKitError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t DescribeTargetEnrichmentRulesResponse) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DescribeTargetEnrichmentRulesResponse) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTargetDescription returns the union data inside the DescribeTargetResponse as a TargetDescription
func (t DescribeTargetResponse) AsTargetDescription() (TargetDescription, error) {
	var body TargetDescription
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTargetDescription overwrites any union data inside the DescribeTargetResponse as the provided TargetDescription
func (t *DescribeTargetResponse) FromTargetDescription(v TargetDescription) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTargetDescription performs a merge with any union data inside the DescribeTargetResponse, using the provided TargetDescription
func (t *DescribeTargetResponse) MergeTargetDescription(v TargetDescription) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsDiscoveryKitError returns the union data inside the DescribeTargetResponse as a DiscoveryKitError
func (t DescribeTargetResponse) AsDiscoveryKitError() (DiscoveryKitError, error) {
	var body DiscoveryKitError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDiscoveryKitError overwrites any union data inside the DescribeTargetResponse as the provided DiscoveryKitError
func (t *DescribeTargetResponse) FromDiscoveryKitError(v DiscoveryKitError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDiscoveryKitError performs a merge with any union data inside the DescribeTargetResponse, using the provided DiscoveryKitError
func (t *DescribeTargetResponse) MergeDiscoveryKitError(v DiscoveryKitError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t DescribeTargetResponse) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DescribeTargetResponse) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDiscoveryDescription returns the union data inside the DiscoveryDescriptionResponse as a DiscoveryDescription
func (t DiscoveryDescriptionResponse) AsDiscoveryDescription() (DiscoveryDescription, error) {
	var body DiscoveryDescription
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDiscoveryDescription overwrites any union data inside the DiscoveryDescriptionResponse as the provided DiscoveryDescription
func (t *DiscoveryDescriptionResponse) FromDiscoveryDescription(v DiscoveryDescription) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDiscoveryDescription performs a merge with any union data inside the DiscoveryDescriptionResponse, using the provided DiscoveryDescription
func (t *DiscoveryDescriptionResponse) MergeDiscoveryDescription(v DiscoveryDescription) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsDiscoveryKitError returns the union data inside the DiscoveryDescriptionResponse as a DiscoveryKitError
func (t DiscoveryDescriptionResponse) AsDiscoveryKitError() (DiscoveryKitError, error) {
	var body DiscoveryKitError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDiscoveryKitError overwrites any union data inside the DiscoveryDescriptionResponse as the provided DiscoveryKitError
func (t *DiscoveryDescriptionResponse) FromDiscoveryKitError(v DiscoveryKitError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDiscoveryKitError performs a merge with any union data inside the DiscoveryDescriptionResponse, using the provided DiscoveryKitError
func (t *DiscoveryDescriptionResponse) MergeDiscoveryKitError(v DiscoveryKitError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t DiscoveryDescriptionResponse) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DiscoveryDescriptionResponse) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDiscoveryList returns the union data inside the DiscoveryListResponse as a DiscoveryList
func (t DiscoveryListResponse) AsDiscoveryList() (DiscoveryList, error) {
	var body DiscoveryList
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDiscoveryList overwrites any union data inside the DiscoveryListResponse as the provided DiscoveryList
func (t *DiscoveryListResponse) FromDiscoveryList(v DiscoveryList) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDiscoveryList performs a merge with any union data inside the DiscoveryListResponse, using the provided DiscoveryList
func (t *DiscoveryListResponse) MergeDiscoveryList(v DiscoveryList) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsDiscoveryKitError returns the union data inside the DiscoveryListResponse as a DiscoveryKitError
func (t DiscoveryListResponse) AsDiscoveryKitError() (DiscoveryKitError, error) {
	var body DiscoveryKitError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDiscoveryKitError overwrites any union data inside the DiscoveryListResponse as the provided DiscoveryKitError
func (t *DiscoveryListResponse) FromDiscoveryKitError(v DiscoveryKitError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDiscoveryKitError performs a merge with any union data inside the DiscoveryListResponse, using the provided DiscoveryKitError
func (t *DiscoveryListResponse) MergeDiscoveryKitError(v DiscoveryKitError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t DiscoveryListResponse) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DiscoveryListResponse) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsDiscoveryData returns the union data inside the DiscoveryResponse as a DiscoveryData
func (t DiscoveryResponse) AsDiscoveryData() (DiscoveryData, error) {
	var body DiscoveryData
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDiscoveryData overwrites any union data inside the DiscoveryResponse as the provided DiscoveryData
func (t *DiscoveryResponse) FromDiscoveryData(v DiscoveryData) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDiscoveryData performs a merge with any union data inside the DiscoveryResponse, using the provided DiscoveryData
func (t *DiscoveryResponse) MergeDiscoveryData(v DiscoveryData) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsDiscoveryKitError returns the union data inside the DiscoveryResponse as a DiscoveryKitError
func (t DiscoveryResponse) AsDiscoveryKitError() (DiscoveryKitError, error) {
	var body DiscoveryKitError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDiscoveryKitError overwrites any union data inside the DiscoveryResponse as the provided DiscoveryKitError
func (t *DiscoveryResponse) FromDiscoveryKitError(v DiscoveryKitError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDiscoveryKitError performs a merge with any union data inside the DiscoveryResponse, using the provided DiscoveryKitError
func (t *DiscoveryResponse) MergeDiscoveryKitError(v DiscoveryKitError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t DiscoveryResponse) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DiscoveryResponse) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
func Ptr[T any](val T) *T {
	return &val
}